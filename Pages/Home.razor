@page "/"
@using Services
@using PairExpensesFS.Entities
@inject Services.UserService UserService
@inject Services.DebtService DebtService
@inject Services.PaymentService PaymentService

<PageTitle>PairXpenses</PageTitle>
<nav>
    <h1>PairXpenses</h1>
    <ChargeControl UserA="@UserA" UserB="@UserB" 
        PercentageA="@percentageA" 
        onPercentageAChanged="PercentageAChanged" 
        IsOrderReversed="@IsOrderReversed" 
        IsOrderReversedChanged="HandleToggle" 
     />
</nav>
<hr>
<main>
    <div class="@(IsOrderReversed ? "order-2" : "order-1")">
        <ColumnaUsuario User="@UserA"
            CambiarUser="@CambiarUser"     
        />
    </div>
    <div class="@(IsOrderReversed ? "order-1" : "order-2")">
        <ColumnaUsuario User="@UserB"                        
            CambiarUser="@CambiarUser"
           />
    </div>
</main>
<section>
    <h1><button @onclick="GenerateReport">Generate report</button></h1>
    <h1>@report</h1>
</section>



@code {
    private List<UserReq>? users;

    private bool IsOrderReversed { get; set; } = false;
    private long APayments { get; set; }
    private long ADebts { get; set; }
    private long BPayments { get; set; }
    private long BDebts { get; set; }
    private string report { get; set; } = "Nothing to report yet.";

    private UserReq UserA { get; set; } = new UserReq { Id = 1, Name = "User A" };
    private UserReq UserB { get; set; } = new UserReq { Id = 2, Name = "User B" };

    private void HandleToggle(bool newValue)
    {
        IsOrderReversed = newValue;
    }

    private int percentageA;

    protected override async Task OnInitializedAsync()
    {
        percentageA = 50;

        users = await UserService.GetUsersAsync();

        UserA = users[0];
        UserB = users[1];

    }
    private void CambiarUser(UserReq user)
    {
        if (user.Id == 1)
        {
            UserA.Name = user.Name;
            Console.WriteLine($"UserA updated to: {UserA.Name}");

        }
        else if (user.Id == 2)
        {
            UserB.Name = user.Name;
            Console.WriteLine($"UserB updated to: {UserB.Name}");

        }
        else
        {
            Console.WriteLine("User ID does not match UserA or UserB.");
        }
        StateHasChanged();
    }

    private async Task GenerateReport()
    {
        long totalExpense;
        string? userWhoSpendMost = "Both users spent equally";
        await GetTotals();
        if (APayments == 0 && BPayments == 0 && ADebts == 0 && BDebts == 0)
        {
            report = "Nothing to report yet. No payments and debts registered or an error ocurred during the total values consulting";
        }
        else
        {
            totalExpense = APayments + BPayments;
            decimal expenseForA = totalExpense * percentageA / 100;
            decimal expenseForB = totalExpense - expenseForA;
            if (APayments > expenseForA)
            {
                if(UserA != null)
                {
                    userWhoSpendMost = UserA.Name;
                }

            }
            else if (BPayments > expenseForB)
            {
                userWhoSpendMost = UserB.Name;
            }

            decimal debtFromAtoB = 0;
            decimal debtFromBtoA = 0;

            if (APayments > expenseForA)
            {
                debtFromBtoA = APayments - expenseForA;
            }
            else if (BPayments > expenseForB)
            {
                debtFromAtoB = BPayments - expenseForB;
            }

            report = $"Total expense: {totalExpense}. ";
            if (userWhoSpendMost != "Both users spent equally")
            {
                report += $"{userWhoSpendMost} spent more than their share ({percentageA}%) during the month. ";
            }




            if (debtFromBtoA > 0)
            {
                decimal totalBDebt = debtFromBtoA + BDebts;
                if(totalBDebt > ADebts)
                {
                    totalBDebt -= ADebts;
                    if (UserA != null && UserB != null)
                    {
                        report += $"{UserB.Name} owes {UserA.Name} {totalBDebt} for the excess payment.";
                    }
                }
                else
                {
                    decimal totalADebt = ADebts - totalBDebt;
                    if (UserB != null && UserA != null)
                    {
                        report += $"{UserA.Name} owes {UserB.Name} {totalADebt} for the excess payment.";
                    }
                }


            }
            else if (debtFromAtoB > 0)
            {
                decimal totalADebt = debtFromAtoB + ADebts;
                if(totalADebt > BDebts)
                {
                    if (UserA != null && UserB != null)
                    {
                        report += $"{UserA.Name} owes {UserB.Name} {totalADebt} for the excess payment.";
                    }
                }
                else
                {
                    decimal totalBDebt = BDebts - totalADebt;
                    if (UserA != null && UserB != null)
                    {
                        report += $"{UserB.Name} owes {UserA.Name} {totalBDebt} for the excess payment.";
                    }

                }

            }
            else
            {

                report += "By checking debts is safe to say that both users spent within their share.";
            }
        }
    }

    private async Task GetTotals()
    {
        try
        {
            BDebts = await DebtService.GetTotalDebtByUser(UserB.Id) ?? 0;
            Console.WriteLine("BD" + BDebts);

            APayments = await PaymentService.GetTotalPaymentByUser(UserA.Id) ?? 0;
            Console.WriteLine("AP" + APayments);

            BPayments = await PaymentService.GetTotalPaymentByUser(UserB.Id) ?? 0;
            Console.WriteLine("BP" + BPayments);

            ADebts = await DebtService.GetTotalDebtByUser(UserA.Id) ?? 0;
            Console.WriteLine("AD" + ADebts);
            
            

        }
        catch (Exception ex)
        {

            Console.WriteLine($"Error generating report: {ex.Message}");
        }
    }

    
    private void PercentageAChanged(int newValue)
    {
        percentageA = newValue;
    }
}
