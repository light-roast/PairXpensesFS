@page "/"
@using Services
@using PairExpensesFS.Entities
@inject Services.UserService UserService
@inject Services.DebtService DebtService
@inject Services.PaymentService PaymentService
@inject NavigationManager NavigationManager
@using System.Globalization

<PageTitle>PairXpenses</PageTitle>
<nav>
    <h1>PairXpenses</h1>
    <ChargeControl UserA="@UserA" UserB="@UserB" 
        PercentageA="@percentageA" 
        onPercentageAChanged="PercentageAChanged" 
        IsOrderReversed="@IsOrderReversed" 
        IsOrderReversedChanged="HandleToggle" 
     />
</nav>

<main>
    <div class="@(IsOrderReversed ? "order-2" : "order-1")">
        <ColumnaUsuario User="@UserA"
            CambiarUser="@CambiarUser"
            RefreshContent="@refreshChildContent" />
    </div>
    <div class="@(IsOrderReversed ? "order-1" : "order-2")">
        <ColumnaUsuario User="@UserB"                        
            CambiarUser="@CambiarUser"
            RefreshContent="@refreshChildContent" />
    </div>
</main>
<section>
    <button @onclick="GenerateReport">Generate report</button>
    <div>
        @if (isConfirmationVisible)
        {
            <div class="confirmation-dialog">
                <p>Are you sure you want to start a new month and reset debts and payments?</p>
                <button @onclick="ConfirmDelete">Yes</button>
                <button id="no" @onclick="CancelDelete">No</button>
            </div>
        }
        else
        {
            <button @onclick="DeleteAllItems">Reset debts and payments</button>
        }
    </div>
    
</section>



@code {
    private List<UserReq>? users;

    private bool IsOrderReversed { get; set; } = false;
    private long APayments { get; set; }
    private long ADebts { get; set; }
    private long BPayments { get; set; }
    private long BDebts { get; set; }
    private string report1 { get; set; } = "Nothing to report yet.";
    private string report2 { get; set; } = "Nothing to report yet.";
    private string report3 { get; set; } = "Nothing to report yet.";
    private string report4 { get; set; } = "Nothing to report yet.";
    private string report5 { get; set; } = "Nothing to report yet.";
    private string finalReport { get; set; } = "Nothing to report yet";
    private int percentageA;

    private UserReq UserA { get; set; } = new UserReq { Id = 1, Name = "User A" };
    private UserReq UserB { get; set; } = new UserReq { Id = 2, Name = "User B" };

    private void HandleToggle(bool newValue)
    {
        IsOrderReversed = newValue;
    }



    protected override async Task OnInitializedAsync()
    {
        percentageA = 50;

        users = await UserService.GetUsersAsync();

        UserA = users[0];
        UserB = users[1];

    }
    private void CambiarUser(UserReq user)
    {
        if (user.Id == 1)
        {
            UserA.Name = user.Name;
            Console.WriteLine($"UserA updated to: {UserA.Name}");

        }
        else if (user.Id == 2)
        {
            UserB.Name = user.Name;
            Console.WriteLine($"UserB updated to: {UserB.Name}");

        }
        else
        {
            Console.WriteLine("User ID does not match UserA or UserB.");
        }
        StateHasChanged();
    }

    private async Task GenerateReport()
    {
        long totalExpense;
        string? userWhoSpendMost = "Both users spent equally";
        string? userWhoSpendLess = "Both users spent equally";
        await GetTotals();
        if (APayments == 0 && BPayments == 0 && ADebts == 0 && BDebts == 0)
        {
            report1 = "Nothing to report yet. No payments and debts registered or an error ocurred during the total values consulting";
            NavigateToNoReport();
            return;
        }
        else
        {
            totalExpense = APayments + BPayments;
            decimal expenseForA = totalExpense * percentageA / 100;
            decimal expenseForB = totalExpense - expenseForA;
            decimal debtFromAtoB = 0;
            decimal debtFromBtoA = 0;
            report1 = $"Total pair expenses during the month: {totalExpense.ToString("C0", CultureInfo.GetCultureInfo("es-CO"))}. \n";
            if (APayments > expenseForA)
            {
                if (UserA != null && UserB != null)
                {
                    userWhoSpendMost = UserA.Name;
                    userWhoSpendLess = UserB.Name;
                }
                debtFromBtoA = APayments - expenseForA;
                report2 = $"{userWhoSpendMost} spent {APayments.ToString("C0", CultureInfo.GetCultureInfo("es-CO"))} during the month. Wich is more than their share ({percentageA}% / {expenseForA.ToString("C0", CultureInfo.GetCultureInfo("es-CO"))}). \n ";
                report3 = BPayments != 0 ? $"{userWhoSpendLess} spent {BPayments.ToString("C0", CultureInfo.GetCultureInfo("es-CO"))} during the month. Wich is less than their share ({100 - percentageA}% / {expenseForB.ToString("C0", CultureInfo.GetCultureInfo("es-CO"))}). \n" : $"{userWhoSpendLess} did not register payments during the month and their share is {100 - percentageA}% / {expenseForB.ToString("C0", CultureInfo.GetCultureInfo("es-CO"))}. \n";
                report4 = ADebts != 0 ? $"{userWhoSpendMost} accumulated a total of debts with {userWhoSpendLess} amounting to {ADebts.ToString("C0", CultureInfo.GetCultureInfo("es-CO"))}" : $"{userWhoSpendMost} does not have any debts with {userWhoSpendLess}.";
                report5 = BDebts != 0 ? $"{userWhoSpendLess} accumulated a total of debts with {userWhoSpendMost} amounting to {BDebts.ToString("C0", CultureInfo.GetCultureInfo("es-CO"))}": $"{userWhoSpendLess} does not have any debts with {userWhoSpendMost}.";

            }
            else if (BPayments > expenseForB)
            {
                if (UserA != null && UserB != null)
                {
                    userWhoSpendMost = UserB.Name;
                    userWhoSpendLess = UserA.Name;
                }
                debtFromAtoB = BPayments - expenseForB;
                report2 = $"{userWhoSpendMost} spent {BPayments.ToString("C0", CultureInfo.GetCultureInfo("es-CO"))} during the month. Wich is more than their share ({100 - percentageA}% / {expenseForB.ToString("C0", CultureInfo.GetCultureInfo("es-CO"))}). \n ";
                report3 = APayments != 0 ? $"{userWhoSpendLess} spent {APayments.ToString("C0", CultureInfo.GetCultureInfo("es-CO"))} during the month. Wich is less than their share ({percentageA}% / {expenseForA.ToString("C0", CultureInfo.GetCultureInfo("es-CO"))}). \n" : $"{userWhoSpendLess} did not register payments during the month and their share is {percentageA}% / {expenseForA.ToString("C0", CultureInfo.GetCultureInfo("es-CO"))}. \n";
                report4 = BDebts != 0 ? $"{userWhoSpendMost} accumulated a total of debts with {userWhoSpendLess} amounting to {BDebts.ToString("C0", CultureInfo.GetCultureInfo("es-CO"))}" : $"{userWhoSpendMost} does not have any debts with {userWhoSpendLess}.";
                report5 = ADebts != 0 ? $"{userWhoSpendLess} accumulated a total of debts with {userWhoSpendMost} amounting to {ADebts.ToString("C0", CultureInfo.GetCultureInfo("es-CO"))}" : $"{userWhoSpendLess} does not have any debts with {userWhoSpendMost}.";
            }




            string userAName = UserA?.Name ?? "Unknown";
            string userBName = UserB?.Name ?? "Unknown";
            if (debtFromBtoA > 0)
            {
                decimal totalBDebt = debtFromBtoA + BDebts;
                decimal netDebt = totalBDebt - ADebts;

                if (netDebt > 0)
                {
                    finalReport = $"{userBName} owes {userAName} {netDebt.ToString("C0", CultureInfo.GetCultureInfo("es-CO"))} for the month's expenses.";
                }
                else if (netDebt < 0)
                {
                    finalReport = $"{userAName} owes {userBName} {(-netDebt).ToString("C0", CultureInfo.GetCultureInfo("es-CO"))} for the month's expenses.";
                }
                else
                {
                    finalReport = "Both users spent within their share and neither owes anything to the other.";
                }
            }
            else if (debtFromAtoB > 0)
            {
                decimal totalADebt = debtFromAtoB + ADebts;
                decimal netDebt = totalADebt - BDebts;

                if (netDebt > 0)
                {
                    finalReport = $"{userAName} owes {userBName} {netDebt.ToString("C0", CultureInfo.GetCultureInfo("es-CO"))} for the month's expenses.";
                }
                else if (netDebt < 0)
                {
                    finalReport = $"{userBName} owes {userAName} {(-netDebt).ToString("C0", CultureInfo.GetCultureInfo("es-CO"))} for the month's expenses.";
                }
                else
                {
                    finalReport = "Both users spent within their share and neither owes anything to the other.";
                }
            }
            else
            {
                finalReport = "Both users spent within their share and neither owes anything to the other.";
            }
        }
        NavigateToReport();
    }

    private void NavigateToReport()
    {
        // Pass report data as query parameters
        var uri = $"report?report1={report1}&report2={report2}&report3={report3}&report4={report4}&report5={report5}&finalReport={finalReport}";
        NavigationManager.NavigateTo(uri, forceLoad: true);
    }

    private void NavigateToNoReport()
    {
        
        NavigationManager.NavigateTo("/NoReport");
    }

    private async Task GetTotals()
    {
        try
        {
            BDebts = await DebtService.GetTotalDebtByUser(UserB.Id) ?? 0;
            

            APayments = await PaymentService.GetTotalPaymentByUser(UserA.Id) ?? 0;
            

            BPayments = await PaymentService.GetTotalPaymentByUser(UserB.Id) ?? 0;
            

            ADebts = await DebtService.GetTotalDebtByUser(UserA.Id) ?? 0;
            
            
            

        }
        catch (Exception ex)
        {

            Console.WriteLine($"Error generating report: {ex.Message}");
        }
    }

    
    private void PercentageAChanged(int newValue)
    {
        percentageA = newValue;
    }

    //Logic to handle reset
    private bool isConfirmationVisible = false;

    private void DeleteAllItems()
    {
        // Show confirmation dialog
        isConfirmationVisible = true;
    }

    private async Task ConfirmDelete()
    {
        if (isConfirmationVisible)
        {
            await DebtService.DeleteAllDebtsAsync();
            await PaymentService.DeleteAllPaymentsAsync();

            isConfirmationVisible = false;
            refreshChildContent = true;
            StateHasChanged();
        }
    }

    private void CancelDelete()
    {
        // Hide confirmation dialog if user cancels
        isConfirmationVisible = false;
    }

    private bool refreshChildContent = false;
}
