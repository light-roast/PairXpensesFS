@page "/"
@using Services
@using PairExpensesFS.Entities
@inject Services.UserService UserService

<PageTitle>PairXpenses</PageTitle>
<nav>
    <h1>PairXpenses</h1>
    <ChargeControl UserA="@UserA" UserB="@UserB" 
        PercentageA="@percentageA" 
        onPercentageAChanged="PercentageAChanged" 
        IsOrderReversed="@IsOrderReversed" 
        IsOrderReversedChanged="HandleToggle" 
     />
</nav>
<hr>
<main>
    <div class="@(IsOrderReversed ? "order-2" : "order-1")">
        <ColumnaUsuario User="@UserA"
            CambiarUser="@CambiarUser"     
        />
    </div>
    <div class="@(IsOrderReversed ? "order-1" : "order-2")">
        <ColumnaUsuario User="@UserB"                        
            CambiarUser="@CambiarUser"
           />
    </div>
</main>



@code {
    private List<UserReq>? users;

    private bool IsOrderReversed { get; set; } = false;
    private void HandleToggle(bool newValue)
    {
        IsOrderReversed = newValue;
    }

    private int percentageA;

    protected override async Task OnInitializedAsync()
    {
        percentageA = 50;

        users = await UserService.GetUsersAsync();

        UserA = users[0];
        UserB = users[1];

    }
    private void CambiarUser(UserReq user)
    {
        if (user.Id == 1)
        {
            UserA.Name = user.Name;
            Console.WriteLine($"UserA updated to: {UserA.Name}");

        }
        else if (user.Id == 2)
        {
            UserB.Name = user.Name;
            Console.WriteLine($"UserB updated to: {UserB.Name}");

        }
        else
        {
            Console.WriteLine("User ID does not match UserA or UserB.");
        }
        StateHasChanged();
    }

   


    private UserReq UserA { get; set; } = new UserReq { Id = 1, Name = "User A" };

   
    private UserReq UserB { get; set; } = new UserReq { Id = 2, Name = "User B" };

    
    private void PercentageAChanged(int newValue)
    {
        percentageA = newValue;
    }
}
