@page "/user"
@using PairExpensesFS.Entities
@inject Services.UserService UserService
@inject Services.PaymentService PaymentService
@inject Services.DebtService DebtService
<section class="column">
    <div>
        @if (isEdit)
        {
            <div class="normal">
                @UserEdit()
            </div>
        }
        else
        {
            <div class="normal">
                @if (User != null)
                {
                    <h3>@User.Name</h3>
                }

                <Icon id="icon" Name="IconName.PencilSquare"  @onclick="HandleEditClick" />
            </div>
        }
    </div>
    
    <form @onsubmit="CreateItem" class="form-container">
        <h3>Add new entry:</h3>
        <select @bind="selectedItemType">
            <option value="Debt">Debt</option>
            <option value="Payment">Payment</option>
        </select>

        @if (selectedItemType == "Debt")
        {
            <div>
                <label for="debtName">Name:</label>
                <input type="text" id="debtName" @bind="debtName" />
            </div>
            <div>
                <label for="debtValue">Value:</label>
                <input type="number" id="debtValue" @bind="debtValue" />
            </div>
        }
        else if (selectedItemType == "Payment")
        {
            <div>
                <label for="paymentName">Name:</label>
                <input type="text" id="paymentName" @bind="paymentName" />
            </div>
            <div>
                <label for="paymentValue">Value:</label>
                <input type="number" id="paymentValue" @bind="paymentValue" />
            </div>
        }

        <button type="submit">Create</button>
    </form>
    <div class="PyD">
        <div class="title">
            <h4>Payment</h4>
            <h4>Value</h4>
            <h4>Date</h4>
        </div>
        @if(payments != null)
        {
            @foreach (var payment in payments)
            {
                <PaymentComponent payment="@payment" 
                    OnDeletePayment="DeletePaymentItem" 
                    />
            }
        }
        
    </div>
    <div class="PyD">
        <div class="title">
            <h4>Debt</h4>
            <h4>Value</h4>
            <h4>Date</h4>
        </div>
        
        @if(debts != null)
        {
            @foreach (var debt in debts)
            {
                <DebtComponent 
                    debt="@debt" 
                    OnDeleteDebt="DeleteDebtItem"                               
                    />
            }
        }
        
    </div>
</section>

@code {

    private string selectedItemType = "Debt"; // Default selected item type
    private string? debtName;
    private long debtValue;
    private string? paymentName;
    private long paymentValue;
    // Declare a state variable to track if the form for updating the user is open
    private bool isEdit = false;

    // Declare a parameter to receive the user name from the parent component
    [Parameter]
    public UserReq? User { get; set; }

    [Parameter]
    public EventCallback<UserReq> CambiarUser { get; set; }

    

    private UserReq? ToUpdate { get; set; }

    private int? UserId { get; set; }


    private string? NewUser { get; set; }

    private List<PaymentReq>? payments;
    private List<DebtReq>? debts;




    protected override void OnParametersSet()
    {
        if(User != null)
        {
            this.UserId = User.Id;
            base.OnParametersSet();
        }

        
    }

    protected override async Task OnInitializedAsync()
    {
        if (User != null)
        {
            payments = await PaymentService.GetPaymentsByUserAsync(User.Id);
        }

        if (User != null)
        {
            debts = await DebtService.GetDebtsByUserAsync(User.Id);
        }
    }



    // Inject an HttpClient instance to make API calls
    [Inject]
    private HttpClient? HttpClient { get; set; }

    // Event handler for when the user clicks the edit icon
    private void HandleEditClick()
    {
        // Set the isEdit flag to true to show the edit form
        isEdit = true;
    }

    // Inner component for editing the user
    private RenderFragment UserEdit() => @<div>
        <input type="text" @bind="NewUser" />
        <button @onclick="HandleUpdateClick">Update</button>
    </div>
    ;

    // Event handler for when the user clicks the update button
    private async Task HandleUpdateClick()
    {
        // Ensure UserId is not null before calling the method
        if (UserId.HasValue && !string.IsNullOrEmpty(NewUser))
        {
            // Call the UserService to update the user in the backend
            var updatedUser = await UserService.UpdateUser(UserId.Value, NewUser);
            if (updatedUser != null)
            {
                // Instantiate ToUpdate if it's null
                if (ToUpdate == null)
                {
                    ToUpdate = new UserReq();
                }

                // Manually update the ToUpdate object with the response
                ToUpdate.Id = updatedUser.Id;
                ToUpdate.Name = updatedUser.Name;

                // Invoke the CambiarUser callback with the updated user object
                await CambiarUser.InvokeAsync(ToUpdate);

                // Reset the isEdit flag to hide the edit form
                isEdit = false;

                // Request a UI update
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("Updated user is null.");
            }
        }
        else
        {
            // Handle the case where UserId is null (optional)
            Console.WriteLine("UserId is null.");
        }
    }

    private async Task CreateItem()
    {
        if (selectedItemType == "Debt")
        {
            if (User != null && debtName != null && debtValue != 0)
            {
                Debt debt = new Debt { Name = debtName, Value = debtValue, UserId = User.Id };
                await DebtService.CreateDebtAsync(debt);
                debts = await DebtService.GetDebtsByUserAsync(User.Id);
                await InvokeAsync(StateHasChanged);

            }
        }
        else if (selectedItemType == "Payment")
        {
            if (User != null && paymentName != null && paymentValue != 0)
            {
                Payment payment = new Payment { Name = paymentName, Value = paymentValue, UserId = User.Id };
                await PaymentService.CreatePaymentAsync(payment);
                payments = await PaymentService.GetPaymentsByUserAsync(User.Id);
                await InvokeAsync(StateHasChanged);

            }
        }
    }

    public async Task DeletePaymentItem(int id)
    {
        var response = await PaymentService.DeletePaymentAsync(id);
        if(User != null)
        {
            payments = await PaymentService.GetPaymentsByUserAsync(User.Id);
            await InvokeAsync(StateHasChanged);
        }

    }

    public async Task DeleteDebtItem(int id)
    {
        var response = await DebtService.DeleteDebtAsync(id);
        if (User != null)
        {
            debts = await DebtService.GetDebtsByUserAsync(User.Id);
            await InvokeAsync(StateHasChanged);
        }

    }

    

    
}


