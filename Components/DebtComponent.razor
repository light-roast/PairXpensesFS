@using PairExpensesFS.Entities
@using System.Globalization
@inject Services.DebtService DebtService
@using System.ComponentModel.DataAnnotations


<article>
	@if (isEdit)
	{
		<EditForm Model="@debtValidation" id="debt-edit-form" OnSubmit="HandleUpdateClick">
			<DataAnnotationsValidator />
			<ValidationSummary />
			<label for="debtName">Name:</label>
			<InputText id="debtName" @bind-Value="debtValidation.Name" placeholder="Enter name" />
			<label for="debtValue">Value:</label>
			<InputNumber id="debtValue" @bind-Value="debtValidation.Value" />
			<button type="submit">Update</button>
			<Icon Name="IconName.DashCircleFill" Size="IconSize.x5" @onclick="HandleEditClick" style="color: black !important;" />
		</EditForm>
	}
	else
	{
		@if (debt != null)
		{
			<h5><Icon Name="IconName.Trash" @onclick="DeleteDebt" /> <Icon @onclick="HandleEditClick" id=" icon" Name="IconName.PencilSquare" /> @debt.Name:</h5>
			<p>@currency</p>
			<p>@debt.CreateDate.ToString("dd/MM/yy")</p>
		}
	}
	
</article>

@code {

	public DebtValidation debtValidation = new DebtValidation();

	private bool isEdit = false;
	private string? NewName { get; set; }
	private long NewValue { get; set; }
	private DebtReq? ToUpdate { get; set; }

	[Parameter]
	public DebtReq? debt { get; set; }

	[Parameter]
	public EventCallback<int> OnDeleteDebt { get; set; }


	private async Task DeleteDebt()
	{
		if(debt != null)
		{
			await OnDeleteDebt.InvokeAsync(debt.Id);
		}
		
	}

	private string? currency { get; set; }

	protected override void OnInitialized()
	{
		if(debt != null)
		{
			currency = debt.Value.ToString("C0", CultureInfo.GetCultureInfo("es-CO"));
		}
		
	}


	private void HandleEditClick()
	{
		isEdit = !isEdit;
	}

	private async Task HandleUpdateClick()
	{
		if (debt != null && debtValidation != null && ValidateForm())
		{
			// Ensure NewName is not null before calling DebtService.UpdateDebt
			if (!string.IsNullOrEmpty(debtValidation.Name))
			{
				var updatedDebt = await DebtService.UpdateDebt(debt.Id, debtValidation.Name, debtValidation.Value);
				if (updatedDebt != null && updatedDebt.Name != "FailedUpdate")
				{
					debt = updatedDebt;
					currency = debt.Value.ToString("C0", CultureInfo.GetCultureInfo("es-CO"));
					isEdit = false;

					StateHasChanged();
				}
			}
		}
	}

	private bool ValidateForm()
	{
		// Validate the form using the built-in ValidateModel method
		var validationResults = new List<ValidationResult>();
		var validationContext = new ValidationContext(debtValidation);
		bool isValid = Validator.TryValidateObject(debtValidation, validationContext, validationResults, true);

		return isValid;
	}

}
