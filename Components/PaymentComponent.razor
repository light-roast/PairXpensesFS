@using PairExpensesFS.Entities
@using System.Globalization
@inject Services.PaymentService PaymentService
@using System.ComponentModel.DataAnnotations

<article>
	@if (isEdit)
	{
		<EditForm Model="@paymentValidation" id="debt-edit-form" OnSubmit="HandleUpdateClick">
			<DataAnnotationsValidator />
			<label for="paymentName">Name:</label>
			<InputText id="paymentName" @bind-Value="paymentValidation.Name" placeholder="Enter name" />
			<label for="paymentValue">Value:</label>
			<InputNumber id="paymentValue" @bind-Value="paymentValidation.Value" />
			<button type="submit">Update</button>
			<Icon id="elementIcon" Color="IconColor.Danger" Name="IconName.DashCircleFill" Size="IconSize.x5" @onclick="HandleEditClick" style="color: black !important;"/>
		</EditForm>
	}
	else
	{
		@if (payment != null)
		{

			<h5><Icon Name="IconName.Trash" @onclick="DeletePayment" /> <Icon id="icon" Name="IconName.PencilSquare" @onclick="HandleEditClick" /> @payment.Name:</h5>
			<p>@currency</p>
			<p>@payment.CreateDate.ToString("dd/MM/yy")</p>
		}
	}
	
</article>

@code {
	public PaymentValidation paymentValidation = new PaymentValidation();
	private bool isEdit = false;
	private PaymentReq? ToUpdate { get; set; }

	[Parameter]
	public PaymentReq? payment { get; set; }

	[Parameter]
	public EventCallback<int> OnDeletePayment { get; set; }

	private async Task DeletePayment()
	{
		if(payment != null)
		{
			await OnDeletePayment.InvokeAsync(payment.Id);
		}
	}

	private string? currency { get; set; }

	protected override void OnInitialized()
	{
		if (payment != null)
		{
			currency = payment.Value.ToString("C0", CultureInfo.GetCultureInfo("es-CO"));
		}

	}


	private void HandleEditClick()
	{
		isEdit = !isEdit;
	}


	private async Task HandleUpdateClick()
	{
		if (payment != null && paymentValidation != null && ValidateForm())
		{
			// Ensure NewName is not null before calling PaymentService.UpdatePayment
			if (!string.IsNullOrEmpty(paymentValidation.Name))
			{
				var updatedPayment = await PaymentService.UpdatePayment(payment.Id, paymentValidation.Name, paymentValidation.Value);
				if (updatedPayment != null && updatedPayment.Name != "FailedUpdate")
				{
					payment = updatedPayment;
					currency = payment.Value.ToString("C0", CultureInfo.GetCultureInfo("es-CO"));
					isEdit = false;

					StateHasChanged();
				}
			}
		}
	}



	private bool ValidateForm()
	{
		// Validate the form using the built-in ValidateModel method
		var validationResults = new List<ValidationResult>();
		var validationContext = new ValidationContext(paymentValidation);
		bool isValid = Validator.TryValidateObject(paymentValidation, validationContext, validationResults, true);

		return isValid;
	}
	
}
